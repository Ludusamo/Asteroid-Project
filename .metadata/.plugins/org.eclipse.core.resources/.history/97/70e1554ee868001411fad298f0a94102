package com.ludusamo.component;

import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.JPanel;

import com.ludusamo.util.Vector2f;

public class MainComponent extends JPanel {

	TitlePanel titlePanel;
	NumberPanel MVSPanel, DPanel;
	PicturePanel pPanel;
	DataPanel dataPanel;
	ChartPanel chartPanel;
	ControlPanel controlPanel;

	public static Font font;
	public static BufferedImage backgroundImg;

	boolean collectingData;
	private final float slopeCutoff = 0;
	public int samplingRate, elapsed;
	float timeElapsed = 0;
	
	public MainComponent() {
		super(new GridBagLayout());

		samplingRate = 500;
		
		loadFont("res/font.ttf");
		try {
			backgroundImg = ImageIO.read(new File("res/background.png"));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		setVisible(true);

		String[] picURLS = { "res/check.png", "res/X.png", "res/unknown.png", "res/doge.jpg" };

		collectingData = false;

		GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.BOTH;

		// Title Display
		c.gridx = 0;
		c.gridy = 0;
		c.gridwidth = 16;
		c.gridheight = 1;
		c.weightx = 1;
		c.weighty = 0.04;
		titlePanel = new TitlePanel("Locating/Identifying Viable Asteroids");
		add(titlePanel, c);
		
		// Magnetic Display
		c.gridx = 0;
		c.gridy = 23;
		c.gridwidth = 3;
		c.gridheight = 2;
		c.weightx = 0.1875f;
		c.weighty = 0.08f;
		DPanel = new NumberPanel("Distance");
		add(DPanel, c);

		// Distance Display
		c.gridx = 3;
		c.gridy = 23;
		c.gridwidth = 3;
		c.gridheight = 2;
		c.weightx = 0.1875f;
		c.weighty = 0.08f;
		MVSPanel = new NumberPanel("Magnetic");
		add(MVSPanel, c);

		// Picture Display
		c.gridx = 6;
		c.gridy = 1;
		c.gridwidth = 10;
		c.gridheight = 22;
		c.weightx = 0.625f;
		c.weighty = 0.88f;
		pPanel = new PicturePanel(picURLS);
		add(pPanel, c);
		pPanel.setPicture(2);

		// Data Display
		c.gridx = 0;
		c.gridy = 12;
		c.gridwidth = 6;
		c.gridheight = 11;
		c.weightx = 0.375f;
		c.weighty = 0.44f;
		dataPanel = new DataPanel();
		add(dataPanel, c);

		// Chart Display
		c.gridx = 0;
		c.gridy = 1;
		c.gridwidth = 6;
		c.gridheight = 11;
		c.weightx = 0.375f;
		c.weighty = 0.44f;
		chartPanel = new ChartPanel(
				new String[] { "Distance", "Magnetic" });
		add(chartPanel, c);

		// Control Display
		c.gridx = 6;
		c.gridy = 23;
		c.gridwidth = 10;
		c.gridheight = 2;
		c.weightx = 0.625f;
		c.weighty = 0.08f;
		controlPanel = new ControlPanel(this);
		add(controlPanel, c);
		validate();

		DPanel.setMinimumDimension();
		MVSPanel.setMinimumDimension();
		dataPanel.setMinimumDimension();
		controlPanel.setMinimumDimension();
		titlePanel.setMinimumDimension();

		this.addComponentListener(new ComponentAdapter() {
			public void componentResized(ComponentEvent e) {
				resize();
			}
		});
	}

	void loadFont(String fontPath) {
		InputStream is = null;
		try {
			is = new BufferedInputStream(new FileInputStream(fontPath));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			this.font = Font.createFont(Font.TRUETYPE_FONT, is);
		} catch (FontFormatException e1) {
			e1.printStackTrace();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}

	public void updateLogic(int deltaT) {
		elapsed += deltaT;
		dataPanel.update(collectingData, getSlope(), timeElapsed, chartPanel.getPoints().size());
		if (collectingData && elapsed >= samplingRate) {
			timeElapsed += (float)(samplingRate / 1000f);
			collectData();
			elapsed = 0;
		}
	}

	private void collectData() {
		if (MVSPanel.getValue() != -1 && DPanel.getValue() != -1 && DPanel.getValue() <= 30f)
			chartPanel.addValue(DPanel.getValue(), MVSPanel.getValue());
		if (DPanel.getValue() < 10f && DPanel.getValue() != -1) {
			stopCollectingData();
		}
	}

	public void newData(String data) {
		if (collectingData) {
			String output = data.substring(1);
			switch (data.charAt(0)) {
			case 'd':
				DPanel.setNumLabel(output);
				break;
			case 'm':
				MVSPanel.setNumLabel(output);
				break;
			}
		}
	}

	public void startCollectingData() {
		clearNumPanels();
		collectingData = true;
		chartPanel.reset();
		timeElapsed = 0;
	}

	public void stopCollectingData() {
		clearNumPanels();
		collectingData = false;
	}

	public void continueCollectingData() {
		collectingData = true;
	}

	public float getSlope() {
		ArrayList<Vector2f> points = chartPanel.getPoints();

		float numSlopes = 0;
		float numerator = 0, denominator = 0;
		float slope = 0;
		for (int i = 0; i < points.size(); i++) {
			for (int j = i + 1; j < points.size(); j++) {
				numerator += ((points.get(j).x - points.get(i).x) * (points
						.get(j).y - points.get(i).y));
				denominator += ((points.get(j).x - points.get(i).x) * (points
						.get(j).x - points.get(i).x));
			}
		}
		slope = numerator / denominator;
		
		return slope;
	}
	
	public void evaluateData() {
		float currentSlope = getSlope();
		
		pPanel.setPicture((currentSlope >= slopeCutoff) ? 0 : 1);
	}
	
	public void resize() {
		chartPanel.resize();
	}
	
	public void clearNumPanels() {
		MVSPanel.setNumLabel("-");
		DPanel.setNumLabel("-");
	}
	
	public NumberPanel getMVSPanel() {
		return MVSPanel;
	}
	
	public NumberPanel getDPanel() {
		return DPanel;
	}
	
	public PicturePanel getPicturePanel() {
		return pPanel;
	}
	
	public ChartPanel getChartPanel() {
		return chartPanel;
	}
	
	public DataPanel getDataPanel() {
		return dataPanel;
	}
}
